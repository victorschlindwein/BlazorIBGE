@rendermode InteractiveAuto

<PageTitle>Cidades</PageTitle>

@if (_cities is null)
{        <div class="mb-3">
            <label class="form-label">Buscar por UF</label>
            <input type="text" class="form-control" @bind="_city.State" />
            <br />
            <button class="btn btn-info" @onclick="() => GetByStateAsync(_city.State)">
                BUSCAR
            </button>
        </div>

        <div class="mb-3">
            <label class="form-label">Buscar por Cidade</label>
            <input type="text" class="form-control" @bind="_city.City" />
            <br />
            <button class="btn btn-info" @onclick="() => GetByCityAsync(_city.City)">
                BUSCAR
            </button>
        </div>

        <div class="mb-3">
            <label class="form-label">Buscar por ID</label>
            <input type="text" class="form-control" />
            <br />
            <button class="btn btn-info" @onclick="() => GetByIdAsync(_city.Id)">
                BUSCAR
            </button>
        </div>
}
else
{
    <div class="mb-3">
        <button class="btn btn-danger" @onclick="Reset">
            VOLTAR
        </button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Cidade</th>
                <th>Estado</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _cities)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.City</td>
                    <td>@item.State</td>
                </tr>
            }
        </tbody>
    </table>
}

<br />
<br />
<br />

@code {
    private List<CityModel>? _cities;
    private CityModel? _city = new();

    protected override void OnInitialized()
    {
        _cities = null;
    }

    public void Reset()
    {
        _cities = null;
    }


    public async Task GetByStateAsync(string state)
    {
        var client = new RestClient();
        var request = new RestRequest($"{Configuration.ApiIbgeState}/{state}");

        try
        {
            _cities = await client.GetAsync<List<CityModel>?>(request);

        }
        catch (Exception e)
        {
        }
    }

    public async Task GetByCityAsync(string city)
    {
        var client = new RestClient();
        var request = new RestRequest($"{Configuration.ApiIbgeCities}/{city}");

        try
        {
            _cities = await client.GetAsync<List<CityModel>?>(request);
        }
        catch (Exception e)
        {
        }
    }

    public async Task GetByIdAsync(int id)
    {
        var list = new List<CityModel>();
        var client = new RestClient();
        var request = new RestRequest($"{Configuration.ApiIbgeId}/{id}");

        try
        {
            var newCity = await client.GetAsync<CityModel?>(request);

            if(!newCity.City.IsNormalized())
                Reset();

            list.Add(newCity);
            _cities = list;
        }
        catch (Exception e)
        {
        }
    }
}